openapi: 3.0.3
info:
  title: Decentraland Worlds Content Server API
  version: 1.0.0
  description: |
    API for Decentraland Worlds, a content server that lets you deploy isolated scenes which are accessible by the Decentraland explorer.
    
    Worlds are scenes that exist outside the Genesis City boundaries and are attached to Decentraland NAMEs. 
    The NAMEs can be used as realms to access your deployed scenes.
    
    **Note**: This server is in ALPHA version.
  contact:
    name: Decentraland Foundation
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://worlds-content-server.decentraland.org
    description: Production server
  - url: https://worlds-content-server.decentraland.zone
    description: Development server
  - url: http://localhost:3000
    description: Local development server

tags:
  - name: Worlds Content Server
    description: API endpoints for Decentraland Worlds Content Server

security:
  - SignedFetch: []

paths:
  /world/{world_name}/about:
    get:
      tags:
        - Worlds Content Server
      summary: /world/{world_name}/about
      description: Returns detailed information about a deployed world including scene configuration, comms adapter, and status
      operationId: getWorldAbout
      parameters:
        - name: world_name
          in: path
          required: true
          description: The name of the world (e.g., my-name.dcl.eth)
          schema:
            type: string
            example: my-name.dcl.eth
      responses:
        '200':
          description: World information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/About'
        '404':
          description: World not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /entities:
    post:
      tags:
        - Worlds Content Server
      summary: /entities
      description: |
        Deploy a new scene to a world. The deployment must include entity metadata and all content files.
        Requires authentication via auth chain.
      operationId: deployEntity
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - entityId
              properties:
                entityId:
                  type: string
                  description: The entity ID (IPFS hash)
                  example: bafkreiabi74jam7uh5gmm6x4hox664j53bmt7dy4alrltkhyj3ozcxs2iu
              additionalProperties:
                type: string
                format: binary
                description: Content files referenced by the entity
      responses:
        '200':
          description: Entity deployed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  creationTimestamp:
                    type: number
                    description: Unix timestamp in milliseconds
                  message:
                    type: string
                    description: Deployment confirmation message
        '400':
          description: Invalid request or deployment failed validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /entities/{world_name}:
    delete:
      tags:
        - Worlds Content Server
      summary: /entities/{world_name}
      description: Remove a deployed scene from a world. Requires signed fetch authentication.
      operationId: undeployEntity
      security:
        - SignedFetch: []
      parameters:
        - name: world_name
          in: path
          required: true
          description: The name of the world to undeploy
          schema:
            type: string
            example: my-name.dcl.eth
      responses:
        '200':
          description: Entity undeployed successfully
        '401':
          description: Unauthorized - invalid signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: World not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /entities/active:
    post:
      tags:
        - Worlds Content Server
      summary: /entities/active
      description: Retrieve information about active entities based on provided pointers
      operationId: getActiveEntities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pointers:
                  type: array
                  items:
                    type: string
                  description: List of pointers to query
      responses:
        '200':
          description: Active entities retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'

  /available-content:
    get:
      tags:
        - Worlds Content Server
      summary: /available-content
      description: Retrieve list of available content hashes
      operationId: getAvailableContent
      responses:
        '200':
          description: Available content retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  cid:
                    type: array
                    items:
                      type: string

  /ipfs/{hashId}:
    get:
      tags:
        - Worlds Content Server
      summary: /ipfs/{hashId}
      description: Retrieve a content file by its IPFS hash
      operationId: getContentFileIpfs
      parameters:
        - name: hashId
          in: path
          required: true
          description: IPFS hash of the content file
          schema:
            type: string
            example: bafkreiabi74jam7uh5gmm6x4hox664j53bmt7dy4alrltkhyj3ozcxs2iu
      responses:
        '200':
          description: Content file retrieved successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Content not found
    head:
      tags:
        - Worlds Content Server
      summary: /ipfs/{hashId}
      description: Check if a content file exists without retrieving it
      operationId: headContentFileIpfs
      parameters:
        - name: hashId
          in: path
          required: true
          description: IPFS hash of the content file
          schema:
            type: string
      responses:
        '200':
          description: Content exists
        '404':
          description: Content not found

  /contents/{hashId}:
    get:
      tags:
        - Worlds Content Server
      summary: /contents/{hashId}
      description: Retrieve a content file by its hash
      operationId: getContentFile
      parameters:
        - name: hashId
          in: path
          required: true
          description: Hash of the content file
          schema:
            type: string
            example: bafkreiabi74jam7uh5gmm6x4hox664j53bmt7dy4alrltkhyj3ozcxs2iu
      responses:
        '200':
          description: Content file retrieved successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Content not found
    head:
      tags:
        - Worlds Content Server
      summary: /contents/{hashId}
      description: Check if a content file exists without retrieving it
      operationId: headContentFile
      parameters:
        - name: hashId
          in: path
          required: true
          description: Hash of the content file
          schema:
            type: string
      responses:
        '200':
          description: Content exists
        '404':
          description: Content not found

  /world/{world_name}/permissions:
    get:
      tags:
        - Worlds Content Server
      summary: /world/{world_name}/permissions
      description: Retrieve the permissions configuration for a world
      operationId: getPermissions
      parameters:
        - name: world_name
          in: path
          required: true
          description: The name of the world
          schema:
            type: string
            example: my-name.dcl.eth
      responses:
        '200':
          description: Permissions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  permissions:
                    $ref: '#/components/schemas/Permissions'
                  owner:
                    type: string
                    description: Ethereum address of the world owner
                    example: '0x1234567890123456789012345678901234567890'

  /world/{world_name}/permissions/{permission_name}:
    post:
      tags:
        - Worlds Content Server
      summary: /world/{world_name}/permissions/{permission_name}
      description: Set the permission type for a specific permission (deployment, access, or streaming). Requires signed fetch and world ownership.
      operationId: postPermission
      security:
        - SignedFetch: []
      parameters:
        - name: world_name
          in: path
          required: true
          description: The name of the world
          schema:
            type: string
            example: my-name.dcl.eth
        - name: permission_name
          in: path
          required: true
          description: The permission to configure
          schema:
            type: string
            enum: [deployment, access, streaming]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UnrestrictedPermissionSetting'
                - $ref: '#/components/schemas/AllowListPermissionSetting'
                - $ref: '#/components/schemas/SharedSecretPermissionSetting'
                - $ref: '#/components/schemas/NFTOwnershipPermissionSetting'
      responses:
        '204':
          description: Permission configured successfully
        '400':
          description: Invalid permission configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /world/{world_name}/permissions/{permission_name}/{address}:
    put:
      tags:
        - Worlds Content Server
      summary: /world/{world_name}/permissions/{permission_name}/{address}
      description: Add an Ethereum address to the allow list for a specific permission. Requires signed fetch and world ownership.
      operationId: putPermissionAddress
      security:
        - SignedFetch: []
      parameters:
        - name: world_name
          in: path
          required: true
          description: The name of the world
          schema:
            type: string
            example: my-name.dcl.eth
        - name: permission_name
          in: path
          required: true
          description: The permission to modify
          schema:
            type: string
            enum: [deployment, access, streaming]
        - name: address
          in: path
          required: true
          description: Ethereum address to add
          schema:
            type: string
            example: '0x1234567890123456789012345678901234567890'
      responses:
        '204':
          description: Address added successfully
        '400':
          description: Invalid request or permission not configured as allow-list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Worlds Content Server
      summary: /world/{world_name}/permissions/{permission_name}/{address}
      description: Remove an Ethereum address from the allow list for a specific permission. Requires signed fetch and world ownership.
      operationId: deletePermissionAddress
      security:
        - SignedFetch: []
      parameters:
        - name: world_name
          in: path
          required: true
          description: The name of the world
          schema:
            type: string
            example: my-name.dcl.eth
        - name: permission_name
          in: path
          required: true
          description: The permission to modify
          schema:
            type: string
            enum: [deployment, access, streaming]
        - name: address
          in: path
          required: true
          description: Ethereum address to remove
          schema:
            type: string
            example: '0x1234567890123456789012345678901234567890'
      responses:
        '204':
          description: Address removed successfully
        '400':
          description: Invalid request or address not in allow list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /wallet/{wallet}/stats:
    get:
      tags:
        - Worlds Content Server
      summary: /wallet/{wallet}/stats
      description: Retrieve storage statistics for a wallet address
      operationId: getWalletStats
      parameters:
        - name: wallet
          in: path
          required: true
          description: Ethereum wallet address
          schema:
            type: string
            example: '0x1234567890123456789012345678901234567890'
      responses:
        '200':
          description: Wallet statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletStats'
        '400':
          description: Invalid wallet address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /wallet/{wallet}/connected-world:
    get:
      tags:
        - Worlds Content Server
      summary: /wallet/{wallet}/connected-world
      description: Retrieve the world that a wallet is currently connected to
      operationId: getWalletConnectedWorld
      parameters:
        - name: wallet
          in: path
          required: true
          description: Ethereum wallet address
          schema:
            type: string
            example: '0x1234567890123456789012345678901234567890'
      responses:
        '200':
          description: Connected world retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  world:
                    type: string
                    description: Name of the connected world
                    nullable: true

  /wallet/contribute:
    get:
      tags:
        - Worlds Content Server
      summary: /wallet/contribute
      description: Retrieve list of domains that the authenticated wallet can contribute to. Requires signed fetch.
      operationId: getContributableDomains
      security:
        - SignedFetch: []
      responses:
        '200':
          description: Contributable domains retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  domains:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContributorDomain'
                  count:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /status:
    get:
      tags:
        - Worlds Content Server
      summary: /status
      description: Retrieve the current status of the content server and communication services
      operationId: getStatus
      responses:
        '200':
          description: Server status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /index:
    get:
      tags:
        - Worlds Content Server
      summary: /index
      description: Retrieve an index of all deployed worlds
      operationId: getIndex
      responses:
        '200':
          description: Index retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorldsIndex'

  /live-data:
    get:
      tags:
        - Worlds Content Server
      summary: /live-data
      description: Retrieve live data about active worlds and users
      operationId: getLiveData
      responses:
        '200':
          description: Live data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  worlds:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorldStatus'

  /get-comms-adapter/{roomId}:
    post:
      tags:
        - Worlds Content Server
      summary: /get-comms-adapter/{roomId}
      description: Retrieve communication adapter connection string for a room. Requires signed fetch.
      operationId: getCommsAdapter
      security:
        - SignedFetch: []
      parameters:
        - name: roomId
          in: path
          required: true
          description: Room identifier
          schema:
            type: string
      responses:
        '200':
          description: Adapter information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  connectionString:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cast-adapter/{roomId}:
    post:
      tags:
        - Worlds Content Server
      summary: /cast-adapter/{roomId}
      description: Retrieve cast adapter connection string for a room. Requires signed fetch.
      operationId: getCastAdapter
      security:
        - SignedFetch: []
      parameters:
        - name: roomId
          in: path
          required: true
          description: Room identifier
          schema:
            type: string
      responses:
        '200':
          description: Cast adapter information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  connectionString:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /livekit-webhook:
    post:
      tags:
        - Worlds Content Server
      summary: /livekit-webhook
      description: Webhook endpoint for LiveKit events
      operationId: livekitWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: LiveKit webhook payload
      responses:
        '200':
          description: Webhook processed successfully

components:
  securitySchemes:
    SignedFetch:
      type: apiKey
      in: header
      name: X-Identity-Auth-Chain-*
      description: |
        Signed fetch authentication using Decentraland's ADR-44 specification.
        Multiple headers are used to provide the authentication chain.

  schemas:
    About:
      type: object
      description: Detailed information about a world
      properties:
        healthy:
          type: boolean
          description: Overall health status
        acceptingUsers:
          type: boolean
          description: Whether the world is accepting new users
        configurations:
          type: object
          properties:
            networkId:
              type: integer
              description: Ethereum network chain ID
            globalScenesUrn:
              type: array
              items:
                type: string
              description: URNs of global scenes
            scenesUrn:
              type: array
              items:
                type: string
              description: URNs of world scenes
            realmName:
              type: string
              description: Display name of the realm
            minimap:
              type: object
              properties:
                enabled:
                  type: boolean
                dataImage:
                  type: string
                estateImage:
                  type: string
            map:
              type: object
              properties:
                minimapEnabled:
                  type: boolean
                sizes:
                  type: array
                  items:
                    type: array
                    items:
                      type: integer
            skybox:
              type: object
              properties:
                fixedHour:
                  type: number
                  nullable: true
                textures:
                  type: array
                  items:
                    type: string
        content:
          type: object
          properties:
            synchronizationStatus:
              type: string
            healthy:
              type: boolean
            publicUrl:
              type: string
        lambdas:
          type: object
          properties:
            healthy:
              type: boolean
            publicUrl:
              type: string
        comms:
          type: object
          properties:
            healthy:
              type: boolean
            protocol:
              type: string
            adapter:
              type: string

    Entity:
      type: object
      description: Scene entity metadata
      properties:
        id:
          type: string
          description: Entity ID (IPFS hash)
        type:
          type: string
          description: Entity type (e.g., 'scene')
        timestamp:
          type: number
          description: Unix timestamp in milliseconds
        pointers:
          type: array
          items:
            type: string
          description: Pointers (coordinates or names)
        content:
          type: array
          items:
            type: object
            properties:
              file:
                type: string
              hash:
                type: string
        metadata:
          type: object
          description: Scene metadata

    Permissions:
      type: object
      description: World permissions configuration
      properties:
        deployment:
          $ref: '#/components/schemas/AllowListPermissionSetting'
        access:
          oneOf:
            - $ref: '#/components/schemas/UnrestrictedPermissionSetting'
            - $ref: '#/components/schemas/AllowListPermissionSetting'
            - $ref: '#/components/schemas/SharedSecretPermissionSetting'
            - $ref: '#/components/schemas/NFTOwnershipPermissionSetting'
        streaming:
          oneOf:
            - $ref: '#/components/schemas/UnrestrictedPermissionSetting'
            - $ref: '#/components/schemas/AllowListPermissionSetting'

    UnrestrictedPermissionSetting:
      type: object
      properties:
        type:
          type: string
          enum: [unrestricted]
      required:
        - type

    AllowListPermissionSetting:
      type: object
      properties:
        type:
          type: string
          enum: [allow-list]
        wallets:
          type: array
          items:
            type: string
          description: List of Ethereum addresses
      required:
        - type
        - wallets

    SharedSecretPermissionSetting:
      type: object
      properties:
        type:
          type: string
          enum: [shared-secret]
        secret:
          type: string
          description: Hashed secret (only set on creation, not returned in GET)
      required:
        - type

    NFTOwnershipPermissionSetting:
      type: object
      properties:
        type:
          type: string
          enum: [nft-ownership]
        nft:
          type: string
          description: NFT contract address and token ID
      required:
        - type
        - nft

    WalletStats:
      type: object
      description: Storage statistics for a wallet
      properties:
        wallet:
          type: string
          description: Ethereum address
        dclNames:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              size:
                type: string
                description: Size in bytes as string
        ensNames:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              size:
                type: string
                description: Size in bytes as string
        usedSpace:
          type: string
          description: Total used space in bytes as string
        maxAllowedSpace:
          type: string
          description: Maximum allowed space in bytes as string
        blockedSince:
          type: string
          format: date-time
          nullable: true
          description: ISO timestamp when wallet was blocked

    ContributorDomain:
      type: object
      properties:
        name:
          type: string
          description: Domain name
        user_permissions:
          type: array
          items:
            type: string
          description: Permissions the user has for this domain
        owner:
          type: string
          description: Owner address
        size:
          type: string
          description: Size in bytes as string

    StatusResponse:
      type: object
      description: Server status information
      properties:
        content:
          type: object
          properties:
            commitHash:
              type: string
              description: Git commit hash of deployed version
            worldsCount:
              type: object
              properties:
                ens:
                  type: integer
                  description: Number of ENS worlds
                dcl:
                  type: integer
                  description: Number of DCL worlds
        comms:
          type: object
          properties:
            adapterType:
              type: string
            statusUrl:
              type: string
            commitHash:
              type: string
              nullable: true
            users:
              type: integer
              description: Number of connected users
            rooms:
              type: integer
              description: Number of active rooms
            timestamp:
              type: number
              description: Unix timestamp in milliseconds

    WorldsIndex:
      type: object
      description: Index of all deployed worlds
      properties:
        index:
          type: array
          items:
            $ref: '#/components/schemas/WorldData'
        timestamp:
          type: number
          description: Unix timestamp in milliseconds

    WorldData:
      type: object
      properties:
        name:
          type: string
          description: World name
        scenes:
          type: array
          items:
            $ref: '#/components/schemas/SceneData'

    SceneData:
      type: object
      properties:
        id:
          type: string
          description: Scene entity ID
        title:
          type: string
          description: Scene title
        description:
          type: string
          description: Scene description
        thumbnail:
          type: string
          nullable: true
          description: Thumbnail image hash
        pointers:
          type: array
          items:
            type: string
          description: Scene pointers
        timestamp:
          type: number
          description: Deployment timestamp
        runtimeVersion:
          type: string
          nullable: true
          description: Scene runtime version

    WorldStatus:
      type: object
      properties:
        worldName:
          type: string
          description: Name of the world
        users:
          type: integer
          description: Number of users in the world

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error type
        message:
          type: string
          description: Error message

